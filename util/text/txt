void sfFtpListingResponse_Destroy(sfFtpListingResponse* FtpListingResponse);
sfBool sfFtpListingResponse_IsOk(sfFtpListingResponse* FtpListingResponse);
sfFtpStatus sfFtpListingResponse_GetStatus(sfFtpListingResponse* FtpListingResponse);
const char* sfFtpListingResponse_GetMessage(sfFtpListingResponse* FtpListingResponse);
size_t sfFtpListingResponse_GetCount(sfFtpListingResponse* FtpListingResponse);
const char* sfFtpListingResponse_GetFilename(sfFtpListingResponse* FtpListingResponse, size_t Index);
void sfFtpDirectoryResponse_Destroy(sfFtpDirectoryResponse* FtpDirectoryResponse);
sfBool sfFtpDirectoryResponse_IsOk(sfFtpDirectoryResponse* FtpDirectoryResponse);
sfFtpStatus sfFtpDirectoryResponse_GetStatus(sfFtpDirectoryResponse* FtpDirectoryResponse);
const char* sfFtpDirectoryResponse_GetMessage(sfFtpDirectoryResponse* FtpDirectoryResponse);
const char* sfFtpDirectoryResponse_GetDirectory(sfFtpDirectoryResponse* FtpDirectoryResponse);
void sfFtpResponse_Destroy(sfFtpResponse* FtpResponse);
sfBool sfFtpResponse_IsOk(sfFtpResponse* FtpResponse);
sfFtpStatus sfFtpResponse_GetStatus(sfFtpResponse* FtpResponse);
const char* sfFtpResponse_GetMessage(sfFtpResponse* FtpResponse);
sfFtp* sfFtp_Create();
void sfFtp_Destroy(sfFtp* Ftp);
sfFtpResponse* sfFtp_Connect(sfFtp* Ftp, sfIPAddress Server, unsigned short Port, float Timeout);
sfFtpResponse* sfFtp_LoginAnonymous(sfFtp* Ftp);
sfFtpResponse* sfFtp_Login(sfFtp* Ftp, const char* UserName, const char* Password);
sfFtpResponse* sfFtp_Disconnect(sfFtp* Ftp);
sfFtpResponse* sfFtp_KeepAlive(sfFtp* Ftp);
sfFtpDirectoryResponse* sfFtp_GetWorkingDirectory(sfFtp* Ftp);
sfFtpListingResponse* sfFtp_GetDirectoryListing(sfFtp* Ftp, const char* Directory);
sfFtpResponse* sfFtp_ChangeDirectory(sfFtp* Ftp, const char* Directory);
sfFtpResponse* sfFtp_ParentDirectory(sfFtp* Ftp);
sfFtpResponse* sfFtp_MakeDirectory(sfFtp* Ftp, const char* Name);
sfFtpResponse* sfFtp_DeleteDirectory(sfFtp* Ftp, const char* Name);
sfFtpResponse* sfFtp_RenameFile(sfFtp* Ftp, const char* File, const char* NewName);
sfFtpResponse* sfFtp_DeleteFile(sfFtp* Ftp, const char* Name);
sfFtpResponse* sfFtp_Download(sfFtp* Ftp, const char* DistantFile, const char* DestPath, sfFtpTransferMode Mode);
sfFtpResponse* sfFtp_Upload(sfFtp* Ftp, const char* LocalFile, const char* DestPath, sfFtpTransferMode Mode);
sfHttpRequest* sfHttpRequest_Create();
void sfHttpRequest_Destroy(sfHttpRequest* HttpRequest);
void sfHttpRequest_SetField(sfHttpRequest* HttpRequest, const char* Field, const char* Value);
void sfHttpRequest_SetMethod(sfHttpRequest* HttpRequest, sfHttpMethod Method);
void sfHttpRequest_SetURI(sfHttpRequest* HttpRequest, const char* URI);
void sfHttpRequest_SetHttpVersion(sfHttpRequest* HttpRequest, unsigned int Major, unsigned int Minor);
void sfHttpRequest_SetBody(sfHttpRequest* HttpRequest, const char* Body);
void sfHttpResponse_Destroy(sfHttpResponse* HttpResponse);
const char* sfHttpResponse_GetField(sfHttpResponse* HttpResponse, const char* Field);
sfHttpStatus sfHttpResponse_GetStatus(sfHttpResponse* HttpResponse);
unsigned int sfHttpResponse_GetMajorVersion(sfHttpResponse* HttpResponse);
unsigned int sfHttpResponse_GetMinorVersion(sfHttpResponse* HttpResponse);
const char* sfHttpResponse_GetBody(sfHttpResponse* HttpResponse);
sfHttp* sfHttp_Create();
void sfHttp_Destroy(sfHttp* Http);
void sfHttp_SetHost(sfHttp* Http, const char* Host, unsigned short Port);
sfHttpResponse* sfHttp_SendRequest(sfHttp* Http, sfHttpRequest* Request, float Timeout);
sfIPAddress sfIPAddress_FromString(const char* String);
sfIPAddress sfIPAddress_FromBytes(sfUint8 Byte0, sfUint8 Byte1, sfUint8 Byte2, sfUint8 Byte3);
sfIPAddress sfIPAddress_FromInteger(sfUint32 Address);
sfBool sfIPAddress_IsValid(sfIPAddress Address);
void sfIPAddress_ToString(sfIPAddress Address, char* String);
sfUint32 sfIPAddress_ToInteger(sfIPAddress Address);
sfIPAddress sfIPAddress_GetLocalAddress();
sfIPAddress sfIPAddress_GetPublicAddress(float Timeout);
sfIPAddress sfIPAddress_LocalHost();
sfPacket* sfPacket_Create();
void sfPacket_Destroy(sfPacket* Packet);
void sfPacket_Append(sfPacket* Packet, void* Data, size_t SizeInBytes);
void sfPacket_Clear(sfPacket* Packet);
const char* sfPacket_GetData(sfPacket* Packet);
size_t sfPacket_GetDataSize(sfPacket* Packet);
sfBool sfPacket_EndOfPacket(sfPacket* Packet);
sfBool sfPacket_CanRead(sfPacket* Packet);
sfBool   sfPacket_ReadBool(sfPacket* Packet);
sfInt8   sfPacket_ReadInt8(sfPacket* Packet);
sfUint8  sfPacket_ReadUint8(sfPacket* Packet);
sfInt16  sfPacket_ReadInt16(sfPacket* Packet);
sfUint16 sfPacket_ReadUint16(sfPacket* Packet);
sfInt32  sfPacket_ReadInt32(sfPacket* Packet);
sfUint32 sfPacket_ReadUint32(sfPacket* Packet);
float    sfPacket_ReadFloat(sfPacket* Packet);
double   sfPacket_ReadDouble(sfPacket* Packet);
void     sfPacket_ReadString(sfPacket* Packet, char* String);
void     sfPacket_ReadWideString(sfPacket* Packet, wchar_t* String);
void sfPacket_WriteBool(sfPacket* Packet, sfBool);
void sfPacket_WriteInt8(sfPacket* Packet, sfInt8);
void sfPacket_WriteUint8(sfPacket* Packet, sfUint8);
void sfPacket_WriteInt16(sfPacket* Packet, sfInt16);
void sfPacket_WriteUint16(sfPacket* Packet, sfUint16);
void sfPacket_WriteInt32(sfPacket* Packet, sfInt32);
void sfPacket_WriteUint32(sfPacket* Packet, sfUint32);
void sfPacket_WriteFloat(sfPacket* Packet, float);
void sfPacket_WriteDouble(sfPacket* Packet, double);
void sfPacket_WriteString(sfPacket* Packet, const char* String);
void sfPacket_WriteWideString(sfPacket* Packet, const wchar_t* String);
sfSelectorTCP* sfSelectorTCP_Create();
sfSelectorUDP* sfSelectorUDP_Create();
void sfSelectorTCP_Destroy(sfSelectorTCP* Selector);
void sfSelectorUDP_Destroy(sfSelectorUDP* Selector);
void sfSelectorTCP_Add(sfSelectorTCP* Selector, sfSocketTCP* Socket);
void sfSelectorUDP_Add(sfSelectorUDP* Selector, sfSocketUDP* Socket);
void sfSelectorTCP_Remove(sfSelectorTCP* Selector, sfSocketTCP* Socket);
void sfSelectorUDP_Remove(sfSelectorUDP* Selector, sfSocketUDP* Socket);
void sfSelectorTCP_Clear(sfSelectorTCP* Selector);
void sfSelectorUDP_Clear(sfSelectorUDP* Selector);
unsigned int sfSelectorTCP_Wait(sfSelectorTCP* Selector, float Timeout);
unsigned int sfSelectorUDP_Wait(sfSelectorUDP* Selector, float Timeout);
sfSocketTCP* sfSelectorTCP_GetSocketReady(sfSelectorTCP* Selector, unsigned int Index);
sfSocketUDP* sfSelectorUDP_GetSocketReady(sfSelectorUDP* Selector, unsigned int Index);
sfSocketTCP* sfSocketTCP_Create();
void sfSocketTCP_Destroy(sfSocketTCP* Socket);
void sfSocketTCP_SetBlocking(sfSocketTCP* Socket, sfBool Blocking);
sfSocketStatus sfSocketTCP_Connect(sfSocketTCP* Socket, unsigned short Port, sfIPAddress HostAddress, float Timeout);
sfBool sfSocketTCP_Listen(sfSocketTCP* Socket, unsigned short Port);
sfSocketStatus sfSocketTCP_Accept(sfSocketTCP* Socket, sfSocketTCP** Connected, sfIPAddress* Address);
sfSocketStatus sfSocketTCP_Send(sfSocketTCP* Socket, const char* Data, size_t Size);
sfSocketStatus sfSocketTCP_Receive(sfSocketTCP* Socket, char* Data, size_t MaxSize, size_t* SizeReceived);
sfSocketStatus sfSocketTCP_SendPacket(sfSocketTCP* Socket, sfPacket* Packet);
sfSocketStatus sfSocketTCP_ReceivePacket(sfSocketTCP* Socket, sfPacket* Packet);
sfBool sfSocketTCP_IsValid(sfSocketTCP* Socket);
sfSocketUDP* sfSocketUDP_Create();
void sfSocketUDP_Destroy(sfSocketUDP* Socket);
void sfSocketUDP_SetBlocking(sfSocketUDP* Socket, sfBool Blocking);
sfBool sfSocketUDP_Bind(sfSocketUDP* Socket, unsigned short Port);
sfBool sfSocketUDP_Unbind(sfSocketUDP* Socket);
sfSocketStatus sfSocketUDP_Send(sfSocketUDP* Socket, const char* Data, size_t Size, sfIPAddress Address, unsigned short Port);
sfSocketStatus sfSocketUDP_Receive(sfSocketUDP* Socket, char* Data, size_t MaxSize, size_t* SizeReceived, sfIPAddress* Address, unsigned short* Port);
sfSocketStatus sfSocketUDP_SendPacket(sfSocketUDP* Socket, sfPacket* Packet, sfIPAddress Address, unsigned short Port);
sfSocketStatus sfSocketUDP_ReceivePacket(sfSocketUDP* Socket, sfPacket* Packet, sfIPAddress* Address, unsigned short* Port);
sfBool sfSocketUDP_IsValid(sfSocketUDP* Socket);

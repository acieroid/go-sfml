//
// SFML - Simple and Fast Multimedia Library
// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
// you must not claim that you wrote the original software.
// in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
// and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//

#ifndef SFML_WINDOW_H
#define SFML_WINDOW_H

// Headers
#include <SFML/Config.h>
#include <SFML/Window/Event.h>
#include <SFML/Window/VideoMode.h>
#include <SFML/Window/WindowHandle.h>
#include <SFML/Window/Types.h>


/// Enumeration of window creation styles
enum
{
sfNone = 0, ///< No border / title bar (this flag and all others are mutually exclusive)
sfTitlebar = 1 << 0, ///< Title bar + fixed border
sfResize = 1 << 1, ///< Titlebar + resizable border + maximize button
sfClose = 1 << 2, ///< Titlebar + close button
sfFullscreen = 1 << 3 ///< Fullscreen mode (this flag and all others are mutually exclusive)
};


/// Structure defining the window's creation settings
typedef struct
{
unsigned int StencilBits; ///< Bits of the stencil buffer
unsigned int AntialiasingLevel; ///< Level of antialiasing
} sfWindowSettings;


/// Construct a new window
/// param Mode : Video mode to use
/// param Title : Title of the window
/// param Style : Window style
/// param Params : Creation settings
// sfWindow* sfWindow_Create(sfVideoMode Mode, const char* Title, unsigned long Style, sfWindowSettings Params);
func (self *Window) Create(title char*, style ulong, params WindowSettings) sfWindow* {
    return C.sfWindow_Create(self.Cref, title, style, params.Cref)
}



/// Construct a window from an existing control
/// param Handle : Platform-specific handle of the control
/// param Params : Creation settings
// sfWindow* sfWindow_CreateFromHandle(sfWindowHandle Handle, sfWindowSettings Params);
func (self *Window) CreateFromHandle(params WindowSettings) sfWindow* {
    return C.sfWindow_CreateFromHandle(self.Cref, params.Cref)
}



/// Destroy an existing window
/// param Window : Window to destroy
// void sfWindow_Destroy(sfWindow* Window);
func (self *Window) Destroy() void {
    return C.sfWindow_Destroy(self.Cref)
}



/// Close a window (but doesn't destroy the internal data)
/// param Window : Window to close

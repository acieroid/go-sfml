//
// SFML - Simple and Fast Multimedia Library
// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
// you must not claim that you wrote the original software.
// If you use this software in a product, an acknowledgment
// in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
// and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
#ifndef SFML_RECT_H
#define SFML_RECT_H
// Headers
#include <SFML/Config.h>
/// sfFloatRect and sfIntRect are utility classes for
/// manipulating rectangles.
typedef struct
{
float Left;
float Top;
float Right;
float Bottom;
} sfFloatRect;
typedef struct
{
int Left;
int Top;
int Right;
int Bottom;
} sfIntRect;
/// Move a rectangle by the given offset
/// param Rect : Rectangle to move
/// param OffsetX : Horizontal offset
/// param OffsetY : Vertical offset
// void sfFloatRect_Offset(sfFloatRect* Rect, float OffsetX, float OffsetY);
func (self *FloatRect) Offset(offsetX float, offsetY float) void {
    return C.sfFloatRect_Offset(self.Cref, offsetX, offsetY)
}
// void sfIntRect_Offset(sfIntRect* Rect, int OffsetX, int OffsetY);
func (self *IntRect) Offset(offsetX int, offsetY int) void {
    return C.sfIntRect_Offset(self.Cref, offsetX, offsetY)
}
/// Check if a point is inside a rectangle's area
/// param Rect : Rectangle to test
/// param X : X coordinate of the point to test
/// param Y : Y coordinate of the point to test
/// return sfTrue if the point is inside
// sfBool sfFloatRect_Contains(sfFloatRect* Rect, float X, float Y);
func (self *FloatRect) Contains(x float, y float) sfBool {
    return C.sfFloatRect_Contains(self.Cref, x, y)
}
// sfBool sfIntRect_Contains(sfIntRect* Rect, int X, int Y);
func (self *IntRect) Contains(x int, y int) sfBool {
    return C.sfIntRect_Contains(self.Cref, x, y)
}
/// Check intersection between two rectangles
/// param Rect1 : First rectangle to test
/// param Rect2 : Second rectangle to test
/// param OverlappingRect : Rectangle to be filled with overlapping rect (can be NULL)
/// return sfTrue if rectangles overlap
// sfBool sfFloatRect_Intersects(sfFloatRect* Rect1, sfFloatRect* Rect2, sfFloatRect* OverlappingRect);
func (self *FloatRect) Intersects(rect2 sfFloatRect*, overlappingRect sfFloatRect*) sfBool {
    return C.sfFloatRect_Intersects(self.Cref, rect2, overlappingRect)
}
// sfBool sfIntRect_Intersects(sfIntRect* Rect1, sfIntRect* Rect2, sfIntRect* OverlappingRect);
func (self *IntRect) Intersects(rect2 sfIntRect*, overlappingRect sfIntRect*) sfBool {
    return C.sfIntRect_Intersects(self.Cref, rect2, overlappingRect)
}
#endif // SFML_RECT_H
